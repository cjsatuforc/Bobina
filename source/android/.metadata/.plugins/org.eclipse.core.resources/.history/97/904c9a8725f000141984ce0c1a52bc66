package com.example.controle;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.UUID;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.ParcelUuid;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Toast;

import com.example.controle.connect.ConnectedThead;
public class MainActivity extends Activity {

	private static final int REQUEST_ENABLE_BT = 0;
	private BluetoothAdapter adapter;
	private BluetoothDevice device;
	
	private ConnectedThead conexao;
	
	private ImageButton frente;
	private ImageButton traz;
	private ImageButton direita;
	private ImageButton esquerda;
	private Button		ledButton;
	private String 		msg=null;
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
        setContentView(R.layout.activity_main);
        setupBluetooth();
        
        this.frente = (ImageButton) findViewById(R.id.botao_cima);
        this.traz = (ImageButton) findViewById(R.id.botao_baixo);
        this.direita = (ImageButton) findViewById(R.id.botao_direita);
        this.esquerda = (ImageButton) findViewById(R.id.botao_esquerda);
        this.ledButton = (Button)	findViewById(R.id.botao_led);
        
        registrarBotao(this.frente, "w");
        registrarBotao(this.traz, "s");
        registrarBotao(this.esquerda, "a");
        registrarBotao(this.direita, "d");
//        registrarBotao(this.ledButton, "l");
        new EnviaMsgTask().execute(); 
        
        
        
        
        /*
        this.frente.setOnClickListener(new OnClickListener() {			
			@Override
			public void onClick(View v) {
				if(MainActivity.this.conexao!=null)
					MainActivity.this.conexao.write("w".getBytes());
			}
		});
        
        this.traz.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				if(MainActivity.this.conexao!=null)
					MainActivity.this.conexao.write("s".getBytes());
			}
		});
        
        this.esquerda.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				if(MainActivity.this.conexao!=null)
					MainActivity.this.conexao.write("a".getBytes());
			}
		});
        

		this.direita.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				if(MainActivity.this.conexao!=null)
					MainActivity.this.conexao.write("d".getBytes());
			}
		});
		this.ledButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				if(MainActivity.this.conexao!=null)
					MainActivity.this.conexao.write("l".getBytes());
			}
		});
        */
    }
    
    
    private void registrarBotao(ImageButton imageButton,final String msg){
    	imageButton.setOnTouchListener(new OnTouchListener() {
			
			@Override
			public boolean onTouch(View v, MotionEvent event) {
				if(event.getAction() == MotionEvent.ACTION_DOWN){					
					if(MainActivity.this.conexao!=null )
						MainActivity.this.conexao.write(msg.getBytes());
					Log.i("enviar", "apertado");
				}
				else if(event.getAction() == MotionEvent.ACTION_UP){
					if(MainActivity.this.conexao!=null )
						MainActivity.this.conexao.write("g".getBytes());
					Log.i("enviar", "solto");
				}
				
				return false;
			}
			
			
		});
    	
    	imageButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
//				Toast.makeText(MainActivity.this, "parando de enviar", Toast.LENGTH_SHORT).show();
//				
			}
		});
    }
    @Override
    protected void onDestroy() {
    	super.onDestroy();
    	if(this.conexao!=null )
    		this.conexao.cancel();    	
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main, menu);
        
       
       
        return true;
    }
    
    @Override
    public boolean onMenuItemSelected(int featureId, MenuItem item) {
    	switch (item.getItemId()) {
		case R.id.devices:
			 final List<BluetoothDevice> devices = getDevices();
			 String[] devicesStrings = new String[devices.size()];
			 
			 for (int i = 0; i < devicesStrings.length; i++) {
				devicesStrings[i] = devices.get(i).getName()+" "+devices.get(i).getAddress();					 			 
			 }
			 AlertDialog.Builder builder = new AlertDialog.Builder(this);
			    builder.setTitle("dispositivos")
			           .setItems(devicesStrings, new DialogInterface.OnClickListener() {
			               public void onClick(DialogInterface dialog, int which) {
			            	 Toast.makeText(MainActivity.this, "clicou", Toast.LENGTH_LONG).show();
//			            	   new ConectaDisposivitoTask().execute(devices.get(which));

			            	 
			            	 
			            	  MainActivity.this.device = devices.get(which);  
			            			  //params[0];
			                	
			              	   
			              	   BluetoothSocket socket;
			              	   try {
			              		   socket = device.createRfcommSocketToServiceRecord(MainActivity.getUUID(device));
			       				
			       				
			              		   MainActivity.this.adapter.cancelDiscovery();
			              		   socket.connect();
			              		   MainActivity.this.conexao = new ConnectedThead(MainActivity.this,socket);
			       				
			              		   
			              		   
			              	   } catch (IOException e) {
			              		   e.printStackTrace();
			              	   }
			            	 
			            	 
			               }
			           });
			           
			 Dialog dialog = builder.create();
			 dialog.show();

			 
			 
			break;

		default:
			break;
		}
    	return super.onMenuItemSelected(featureId, item);
    }
    
    private void setupBluetooth(){
    	this.adapter = BluetoothAdapter.getDefaultAdapter();
    	if(this.adapter==null)
    		Toast.makeText(this, "não tem suporte à bluetooth", Toast.LENGTH_SHORT).show();
    	else{
    		if(!this.adapter.isEnabled()){
    			Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
    		    startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
    		}
    	}
    		
    }
    
    private List<BluetoothDevice> getDevices(){
    	List<BluetoothDevice> devices = new ArrayList<BluetoothDevice>();
        Set<BluetoothDevice> pairedDevices = this.adapter.getBondedDevices();
        if (pairedDevices.size() > 0) {
        	for (BluetoothDevice device : pairedDevices) {
        		devices.add(device);
        	}
        }
        return devices;
    }
    public static UUID getUUID(BluetoothDevice phoneDevice){

    	Method method;
		try {
			method = phoneDevice.getClass().getMethod("getUuids", null);
			ParcelUuid[] phoneUuids = (ParcelUuid[]) method.invoke(phoneDevice, null);
			
			return phoneUuids[0].getUuid();
		} catch (NoSuchMethodException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		}
    	return null;
    	
    	
    }
    
    
    class ConectaDisposivitoTask extends AsyncTask<BluetoothDevice, Void, Void>{

		@Override
		protected Void doInBackground(BluetoothDevice... params) {
			  MainActivity.this.device =  params[0];
          	
       	   
       	   BluetoothSocket socket;
       	   try {
       		   socket = device.createRfcommSocketToServiceRecord(MainActivity.getUUID(device));
				
				
       		   MainActivity.this.adapter.cancelDiscovery();
       		   socket.connect();
       		   MainActivity.this.conexao = new ConnectedThead(MainActivity.this,socket);
				
       		   
       		   
       	   } catch (IOException e) {
       		   e.printStackTrace();
       	   }
			return null;
		}
		
		@Override
		protected void onPostExecute(Void result) {
			Toast.makeText(MainActivity.this, "conectado à "+ MainActivity.this.device.getName(), Toast.LENGTH_LONG).show();
			
		}
    	
    }
    
    class EnviaMsgTask extends AsyncTask<Void, Void, Void>{

		@Override
		protected Void doInBackground(Void... params) {
			while(true){
				if(MainActivity.this.conexao!=null && MainActivity.this.msg!=null)
					MainActivity.this.conexao.write(MainActivity.this.msg.getBytes());
			}
			
		}
    	
    }
}
